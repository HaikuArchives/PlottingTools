/* -------------------------------------------------------------------	Title:		RandomGen;	Purpose:		Provides randomly or distributed random numbers, using the		Macintosh's random number generator as a starting point.			Author:		Stephen Wardlaw, M.D.		Dept. of Laboratory Medicine		Yale University School of Medicine		462-CB  Y-NHH		20 York St.		New Haven, CT  06504	Edit History:		17 Jan, 94 - Adapted for MetroWerks C++		15 Jun, 92 - Created by author for MetroWerks M-2.		------------------------------------------------------------------- */#include "RandomGen.h"#include "Math.h"#include "QuickDraw.h"	const double k_kurtFact = 20.0;	Boolean haveVal;Boolean inited = 0;double gloSet, eFact;double gly;double glv[98];double fact;	// -------------------------------------------------------------------// ¥ Public members// -------------------------------------------------------------------/* Provides normal distribution with kurtosis (peaked).PROCEDURE SkewedGauss():REAL;VAR	fac,r,v1,v2:REAL;	BEGIN IF NOT haveVal THEN        (* Find two normally distributed numbers *)	REPEAT		v1 := (Exp(RandomReal()*eFact) - (KURTFACT/2.0 + 1.0))/(KURTFACT/2.0);;		v2 := (Exp(RandomReal()*eFact) - (KURTFACT/2.0 + 1.0))/(KURTFACT/2.0);;		r := v1*v1 + v2*v2;		UNTIL (r < 1.0) AND (r > 0.0);	fac := Sqrt(-2.0*Ln(r)/r);	gloSet := v1*fac;               (* Save one number for next pass *)	haveVal := TRUE;	RETURN v2*fac;                        (* Return the other number *)	ELSE	haveVal := FALSE;                   (* Now, get two more numbers *)	RETURN gloSet;                       (* Return the unused number *)	END;*/	// -------------------------------------------------------------------// Initializes the random generator with the specified seed.voidRandomGen::InitRandom(long seed){	//++ Figure how to init seed in this environment	double r = Ran0(TRUE);  // Init the generator matrix	inited = TRUE;}// -------------------------------------------------------------------// Provided random REAL numbers with a given mean & CV.doubleRandomGen::NormalDist(double mean,sd){	sd = fabs(sd);	if(sd > 0.0) {		return mean + RandomGauss()*sd;	} else {		return mean;		}	}// -------------------------------------------------------------------// Provides integers from a Poisson distribution about the 'mean'.intRandomGen::PoissonInt(double mean){	double sum = 0.0;	int ctr = -1;	do {		ctr++;		sum = sum - log(RandomReal());		}		while (sum <= mean);	return ctr;	}// -------------------------------------------------------------------// Provides random numbers in a gaussian distribution.doubleRandomGen::RandomGauss(){	double	fac,r,v1,v2;	if(!haveVal) {		do {				v1 = 2.0*RandomReal() - 1.0;			v2 = 2.0*RandomReal() - 1.0;			r = v1*v1 + v2*v2;			}			while((r >= 1.0) && (r <= 0.0));		fac = sqrt(-2.0*log(r)/r);		gloSet = v1*fac;               // Save one number for next pass)		haveVal = TRUE;		return v2*fac;                 // Return the other number	} else {		haveVal = FALSE;               // Now, get two more numbers		return gloSet;                 // Return the unused number		}}		// -------------------------------------------------------------------// Provides random REAL numbers from 0.0 to 1.0.double RandomGen::RandomReal(){	return Ran0(FALSE);}// -------------------------------------------------------------------// ¥ Private members// -------------------------------------------------------------------// Provides random REAL numbers from 0.0 to 1.0.doubleRandomGen::RandReal(){	return Random()/65535; // - 0.00001; ??}// -------------------------------------------------------------------// Provide an additionally 'scrambled' random numberdoubleRandomGen::Ran0(Boolean reset){	int n;		if(reset) {		for(n = 1; n < 97; n++) {			glv[n] = RandReal();			}		gly = RandReal();		}	n = 1 + (97.0*gly);	gly = glv[n];	glv[n] = RandReal();	return gly;}