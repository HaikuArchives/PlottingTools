/* ------------------------------------------------------------------ 	Title: 		LMSmoothingFilters	Description: 		A set of digital signal filters	Author :		Stephen Wardlaw, M.D.		Yale University School of Medicine		20 York St.		New Haven, CT  06504	Edit History:				11 March, 1995			Created------------------------------------------------------------------ */ #pragma onceclass LMSmoothingFilters {	public:		LMSmoothingFilters();		virtual		~LMSmoothingFilters();			// This is a simple filter which averages the data over (span/2)	// positions on either side of the index datum.  The filter handles	// the ends of the array by mirroring the points.  This preserves any	// constant slope but can cause complications if the span is large	// and the slope is not uniform.	// 'span' must be an odd number	void			AverageData(double* dArray, int aryLen, int span);	void			AverageData(short* sArray, int aryLen, int span);			// These filters use a separate destination filter, instead	// of modifying the source		void			AverageData(const double* const sourceArray, double* destArray, int aryLen, int span);	void			AverageData(const short* const sourceArray, short* destArray, int aryLen, int span);				// This filter assumes a gaussian distribution of the signal about the	// index datum and truncates the datum to the expected value.		// 'span' must be an odd number	void		GaussFilter(double* dArray, int aryLen, int span);			void		GaussFilter(short* dArray, int aryLen, int span);			// These filters use a separate destination filter, instead	// of modifying the source		void		GaussFilter(const double* const sourceArray, double* destArray, int aryLen, int span);			void		GaussFilter(const short* const sourceArray, short* destArray, int aryLen, int span);			};