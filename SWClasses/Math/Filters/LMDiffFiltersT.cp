/* ------------------------------------------------------------------ 	Title: 		LMDiffFiltersT	Description: 		A set of digital signal filters	Author :		Stephen Wardlaw, M.D.		Yale University School of Medicine		20 York St.		New Haven, CT  06504	Edit History:				10 February, 1997			Adapted to template class			11 March, 1995			Created------------------------------------------------------------------ */ #include "LMDiffFiltersT.h"// ------------------------------------------------------------------ //	¥ CONSTRUCTORS & DESTRUCTOR// ------------------------------------------------------------------ // ------------------------------------------------------------------ //	¥ Public Methods// ------------------------------------------------------------------ // ------------------------------------------------------------------ template <class Ary1, class Ary2>voidLMDiffFiltersT<Ary1,Ary2>::Differentiate(Ary1* dArray, int aryLen, int span){	span /= 2;	if(aryLen < span*2) {		return;	}		double* hold = new double[span];		// Load the holding array with the beginning of the array	for(int n= 0; n < span; n++) {		hold[n] = dArray[n];	}		int hIndex = 0;	int hLoad = span - 1;	for(n = span; n < (aryLen - span); n++) {		dArray[n] = dArray[n + span] - hold[hIndex];		++hIndex %= span;		++hLoad %= span;		hold[hLoad] = dArray[n + 1];	}		// Fill out either end of the array by replication	for(n = span-1; n >= 0; n--) {		dArray[n] = dArray[span];	}		for(n = aryLen - span + 1; n < aryLen; n++) {		dArray[n] = dArray[span];	}		delete [] hold;}// ------------------------------------------------------------------ template <class Ary1, class Ary2>void LMDiffFiltersT<Ary1,Ary2>::Differentiate(Ary1* const sourceArray, 						  							  Ary2* destArray,						  							  int aryLen, int span){	if(span < 2) {		span = 2;	}	span /= 2;	if(aryLen < span*2) {		return;	}		for(int n = span; n < (aryLen - span - 1); n++) {		destArray[n] = (double)sourceArray[n + span] - (double)sourceArray[n - span];	}		// Fill out either end of the array by replication	n = span - 1;	while(n >= 0) {		destArray[n] = destArray[span];		n--;	}	n = aryLen - span;	while(n < aryLen) {		destArray[n] = destArray[aryLen - span - 1];		n++;	}}// ------------------------------------------------------------------ //	¥ Protected Methods// ------------------------------------------------------------------ 